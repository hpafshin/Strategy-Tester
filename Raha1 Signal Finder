# Importing required libraries
import pandas as pd
import numpy as np
import pathlib
import io
import sys

# Reading every file in a folder with at least 21 records
path = pathlib.Path('e:/TSE Data/LatinSymbol')
final_list =[]
for file in path.iterdir():
    temp_list = [file]
    df = pd.read_csv (file)
    if len(df)<30:
        pass
    else:
        def get_csv_tail(filepath, max_rows=1):
            with open(filepath, "rb") as f:
                first = f.readline().decode(sys.stdout.encoding)  # Read the first line.
                f.seek(-2, 2)                                     # Jump to the second last byte.
                count = 0
                while count < max_rows:                           # Until we've gone max_rows back
                    try:
                        while f.read(1) != b"\n":                 # Until EOL is found...
                            f.seek(-2, 1)                         # ...jump back the read byte plus one more.
                    except IOError:
                        f.seek(-1, 1)
                        if f.tell() == 0:
                            break
                    count = count + 1
                    f.seek(-2, 1)                                 # ...jump back the read byte plus one more.
                f.seek(1, 1)                                      # move forward one byte
                tail = f.read().decode(sys.stdout.encoding)       # We found our spot; read from here through to the end of the file.
                f.close()
                        
            return io.StringIO(first + tail)
        df = pd.read_csv(get_csv_tail(file, max_rows=30))
        last = len (df) - 1
        name = df.loc[last,'Symbol']
        temp_list.append (name)
        
# Defining indicators functions    
        def williams_aligator (jaw, teeth, lip):
            df ['mean'] = (df['High'] + df ['Low'])/2
            def SMMA (period):
                for i in range (len (df)):
                    if i >= period:
                        df [f'smma{period}'] = df.rolling (window= period) ['mean']. mean ()
                for i in range (period, len (df)):
                    df.loc[i,f'smma{period}'] = (df.loc[i-1,f'smma{period}']*(period-1) + df.loc[i,'mean'])/period
                return df
            SMMA (jaw)
            SMMA (teeth)
            SMMA (lip)
            df ['jaw'] = df [f'smma{jaw}'] .shift (8)
            df ['teeth'] = df [f'smma{teeth}'] .shift (5)
            df ['lip'] = df [f'smma{lip}'] .shift (3)
            return df    
        def macd (fast, slow, signal):
            exp1 = df.ewm (span= fast, adjust=False) ['Close'].mean ()
            exp2 = df.ewm (span= slow, adjust=False) ['Close'].mean ()
            macd = exp1 - exp2
            df ['MACD'] = macd
            sig = df.ewm (span= signal , adjust=False) ['MACD'].mean ()
            df ['Signal'] = sig
            histogram = macd - sig
            df ['Histogram'] = histogram
            return df
        def send_symbol_name ():
            pass
        df = williams_aligator (13, 8, 5)
        df = macd (12,26,9)
# Generating Strategy with buy and sell signals
        df['MACDsig'] = np.where ((np.logical_and(df['MACD']>0, df['MACD']>df['Signal'])), True, False)
        df['Gatorsig'] = np.where ((np.logical_and(df['lip']>df['teeth'], df['teeth']>df['jaw'])), True, False)
        df['Buy'] = np.where ((np.logical_and(df['MACDsig']==True, df['Gatorsig']==True)),'buy','-')
        df['Sell 1/2'] = np.where ((np.logical_and(df['MACD']<df['Signal'], df['Gatorsig']==False)),'sell 1/2','-')
        df['Sell All'] = np.where ((df['MACD']<0),'sell all', '-')

# Finding strategy Signal
        if df.loc[last,'Buy'] == 'buy':
            if df.loc[last-1, 'MACD'] <= 0:
            #if df.loc[last-1, 'Buy'] != 'buy':
                final_list.append (temp_list)
        
# Exporting result to a .csv file
data_frame = pd.DataFrame (final_list)
if len (data_frame) >= 1:
    data_frame.to_csv ('Raha1BuySignal.csv', index=False)
    #send_symbol_name()
else:
    print ('There was no signal')
